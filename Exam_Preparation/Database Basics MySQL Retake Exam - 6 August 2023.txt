01. Table Design
CREATE TABLE `cities` (
    `id` INT PRIMARY KEY AUTO_INCREMENT,
    `name` VARCHAR(60) NOT NULL UNIQUE
);

CREATE TABLE `property_types` (
    `id` INT PRIMARY KEY AUTO_INCREMENT,
    `type` VARCHAR(40) NOT NULL UNIQUE,
    `description` TEXT
);

CREATE TABLE `properties` (
    `id` INT PRIMARY KEY AUTO_INCREMENT,
    `address` VARCHAR(80) NOT NULL UNIQUE,
    `price` DECIMAL(19 , 2 ) NOT NULL,
    `area` DECIMAL(19 , 2 ),
    `property_type_id` INT,
    `city_id` INT,
    CONSTRAINT fk_properties_property_types FOREIGN KEY (`property_type_id`)
        REFERENCES `property_types` (`id`),
    CONSTRAINT fk_properties_cities FOREIGN KEY (`city_id`)
        REFERENCES `cities` (`id`)
);

CREATE TABLE `agents` (
    `id` INT PRIMARY KEY AUTO_INCREMENT,
    `first_name` VARCHAR(40) NOT NULL,
    `last_name` VARCHAR(40) NOT NULL,
    `phone` VARCHAR(20) NOT NULL UNIQUE,
    `email` VARCHAR(50) NOT NULL UNIQUE,
    `city_id` INT,
    CONSTRAINT fk_agents_cities FOREIGN KEY (`city_id`)
        REFERENCES `cities` (`id`)
);

CREATE TABLE `buyers` (
    `id` INT PRIMARY KEY AUTO_INCREMENT,
    `first_name` VARCHAR(40) NOT NULL,
    `last_name` VARCHAR(40) NOT NULL,
    `phone` VARCHAR(20) NOT NULL UNIQUE,
    `email` VARCHAR(50) NOT NULL UNIQUE,
    `city_id` INT,
    CONSTRAINT fk_buyers_cities FOREIGN KEY (`city_id`)
        REFERENCES `cities` (`id`)
);

CREATE TABLE `property_offers` (
    `property_id` INT NOT NULL,
    `agent_id` INT NOT NULL,
    `price` DECIMAL(19 , 2 ) NOT NULL,
    `offer_datetime` DATETIME,
    CONSTRAINT fk_offers_properties FOREIGN KEY (`property_id`)
        REFERENCES properties (`id`),
    CONSTRAINT fk_offers_agents FOREIGN KEY (`agent_id`)
        REFERENCES agents (`id`)
);

CREATE TABLE `property_transactions` (
    `id` INT PRIMARY KEY AUTO_INCREMENT,
    `property_id` INT NOT NULL,
    `buyer_id` INT NOT NULL,
    `transaction_date` DATE,
    `bank_name` VARCHAR(30),
    `iban` VARCHAR(40) UNIQUE,
    `is_successful` BOOLEAN,
    CONSTRAINT fk_transactions_properties FOREIGN KEY (`property_id`)
        REFERENCES properties (`id`),
    CONSTRAINT fk_buyers_properties FOREIGN KEY (`buyer_id`)
        REFERENCES buyers (`id`)
);

02. Insert
INSERT INTO property_transactions (`property_id`, `buyer_id`, `transaction_date`, `bank_name`, `iban`, `is_successful`)
SELECT (p.`agent_id` + DAY(p.`offer_datetime`)), 
(p.`agent_id` + MONTH(p.`offer_datetime`)), 
DATE(p.`offer_datetime`), 
CONCAT_WS(' ', 'Bank', p.`agent_id`), 
CONCAT('BG', p.`price`, p.`agent_id`), 
1 
FROM `property_offers` AS p
WHERE p.`agent_id` <= 2

03. Update
UPDATE `properties`
SET `price` = `price` - 50000
WHERE `price` >= 800000;

04. Delete
DELETE FROM `property_transactions`
WHERE `is_successful` = 0;

05. Agents
SELECT * FROM `agents`
ORDER BY `city_id` DESC, `phone` DESC;

06. Offers from 2021
SELECT * FROM `property_offers`
WHERE YEAR(`offer_datetime`) = 2021
ORDER BY`price`
LIMIT 10

07. Properties without offers
SELECT LEFT(`address`, 6) AS `agent_name`,
(CHAR_LENGTH(`address`) * 5430) AS `price`
FROM `properties` AS p
LEFT JOIN `property_offers` AS po ON po.`property_id` = p.`id`
WHERE po.`agent_id` IS NULL
ORDER BY `agent_name` DESC, `price` DESC;

08. Best Banks
SELECT `bank_name`, COUNT(`iban`) AS `count` FROM `property_transactions`
GROUP BY `bank_name`
HAVING `count` >=9 
ORDER BY `count` DESC, `bank_name`;

09. Size of the areaSELECT 
    `address`,
    `area`,
    CASE
        WHEN `area` <= 100 THEN 'small'
        WHEN `area` <= 200 THEN 'medium'
        WHEN `area` <= 500 THEN 'large'
        ELSE 'extra large'
    END AS `size`
FROM
    `properties`
ORDER BY `area`, `address` DESC;

10. Offers count in a city
CREATE FUNCTION udf_offers_from_city_name (cityName VARCHAR(50))
RETURNS INT 
DETERMINISTIC
BEGIN
		DECLARE count_city_offers INT;
        SET count_city_offers := (SELECT COUNT(`property_id`) FROM `property_offers` AS po
								  JOIN `properties` AS p ON po.`property_id` = p.`id`
                                  JOIN `cities` AS c ON p.`city_id` = c.`id`
                                  WHERE c.`name` = cityName);
     RETURN count_city_offers;
END;

11. Special Offer
CREATE PROCEDURE udp_special_offer(first_name VARCHAR(50))
BEGIN
        UPDATE `property_offers` AS po
        JOIN `agents` AS a ON po.`agent_id` = a.`id`
        SET po.`price` = po.`price` * 0.90
        WHERE a.`first_name` = first_name;
END;
