01. Table Design
CREATE TABLE `countries` (
`id` INT PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(30) NOT NULL UNIQUE,
`continent` VARCHAR(30) NOT NULL,
`currency` VARCHAR(5) NOT NULL
);

CREATE TABLE `genres`(
`id` INT PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE `actors`(
`id` INT PRIMARY KEY AUTO_INCREMENT,
`first_name` VARCHAR(50) NOT NULL,
`last_name` VARCHAR(50) NOT NULL,
`birthdate` DATE NOT NULL,
`height` INT,
`awards` INT,
`country_id` INT NOT NULL,

CONSTRAINT fk_actors_countries
FOREIGN KEY(`country_id`)
REFERENCES `countries`(`id`)
);

CREATE TABLE `movies_additional_info`(
`id` INT PRIMARY KEY AUTO_INCREMENT,
`rating` DECIMAL(10, 2) NOT NULL,
`runtime` INT NOT NULL,
`picture_url` VARCHAR(80) NOT NULL,
`budget` DECIMAL(10, 2),
`release_date` DATE NOT NULL,
`has_subtitles` BOOLEAN,
`description` TEXT
);

CREATE TABLE `movies` (
`id` INT PRIMARY KEY AUTO_INCREMENT,
`title` VARCHAR(70) NOT NULL UNIQUE,
`country_id` INT NOT NULL,
`movie_info_id` INT NOT NULL UNIQUE,
CONSTRAINT fk_movies_countries
FOREIGN KEY (`country_id`)
REFERENCES `countries`(`id`),

CONSTRAINT fk_movies_movie_info
FOREIGN KEY (`movie_info_id`)
REFERENCES `movies_additional_info`(`id`)
);

CREATE TABLE `movies_actors`(
`movie_id` INT,
`actor_id` INT,
CONSTRAINT fk_movies_movie
FOREIGN KEY (`movie_id`)
REFERENCES `movies`(`id`),

CONSTRAINT fk_actors_actor
FOREIGN KEY (`actor_id`)
REFERENCES `actors`(`id`)
);

CREATE TABLE `genres_movies`(
`genre_id` INT,
`movie_id` INT,
CONSTRAINT fk_genres_genre
FOREIGN KEY (`genre_id`)
REFERENCES `genres`(`id`),

CONSTRAINT fk_movie_movie
FOREIGN KEY (`movie_id`)
REFERENCES `movies`(`id`)
);

02. Insert
INSERT INTO `actors` (`first_name`, `last_name`, `birthdate`, `height`, `awards`, `country_id`)
SELECT REVERSE(a.`first_name`), REVERSE(a.`last_name`), DATE_SUB(a.`birthdate`, INTERVAL 2 DAY), (a.`height` + 10), a.`country_id`, 3 FROM `actors` AS a
WHERE a.`id` <= 10;

03. Update
UPDATE `movies_additional_info` 
SET `runtime` = `runtime` - 10
WHERE `id` >= 15 AND `id` <= 25;

04. Delete
DELETE c FROM `countries` AS c
LEFT JOIN `movies` AS m ON m.`country_id` = c.`id`
WHERE m.`country_id` IS NULL;

05. Countries
SELECT * FROM `countries`
ORDER BY `currency` DESC, `id`;

06. Old movies
SELECT ma.`id`, m.`title`, ma.`runtime`, ma.`budget`, ma.`release_date` FROM `movies_additional_info` AS ma
JOIN `movies` AS m ON ma.`id` = m.`movie_info_id`
WHERE YEAR(ma.`release_date`) BETWEEN (1996) AND (1999)
ORDER BY ma.`runtime`,ma.`id`
LIMIT 20;

â€‹07. Movie casting
SELECT CONCAT_WS(' ', `first_name`, `last_name`) AS `full_name`, CONCAT(REVERSE(`last_name`), CHAR_LENGTH(`last_name`), '@cast.com') AS `email`,
2022 - YEAR(`birthdate`) AS `age`, `height` FROM `actors` AS a
LEFT JOIN `movies_actors` AS ma ON ma.`actor_id` = a.`id`
WHERE ma.`actor_id` IS NULL
ORDER BY `height`;

08. International festival
SELECT c.`name`, COUNT(m.`id`) AS `movies_count` FROM `countries` AS c
JOIN `movies` AS m ON m.`country_id` = c.`id`
GROUP BY c.`name`
HAVING `movies_count` >= 7
ORDER BY c.`name` DESC;

09. Rating system
SELECT 
    m.`title`,
    (CASE
        WHEN ma.`rating` <= 4 THEN 'poor'
        WHEN ma.`rating` <= 7 THEN 'good'
        ELSE 'excellent'
    END) AS `rating`,
    IF(ma.`has_subtitles` = 1,
        'english',
        '-') AS `subtitles`,
    ma.`budget`
FROM
    `movies` AS m
        JOIN
    `movies_additional_info` AS ma ON m.`movie_info_id` = ma.`id`
ORDER BY ma.`budget` DESC;

10. History movies
CREATE FUNCTION udf_actor_history_movies_count(full_name VARCHAR(50))
RETURNS INT
DETERMINISTIC
BEGIN
        DECLARE count_history_movies INT;
        SET count_history_movies := (SELECT COUNT(gm.`movie_id`) FROM `genres_movies` AS gm
				     JOIN `genres` AS g ON gm.`genre_id` = g.`id`
                                     JOIN `movies_actors` AS ma ON ma.`movie_id` = gm.`movie_id`
                                     JOIN `actors` AS a ON ma.`actor_id` = a.`id`
                                     WHERE (CONCAT_WS(' ', a.`first_name`, a.`last_name`) = full_name) AND (g.`name` = 'History'));
	
        RETURN count_history_movies;
END;

11. Movie awards
CREATE PROCEDURE udp_award_movie (movie_title VARCHAR(50))
BEGIN
       UPDATE `actors` AS a
       JOIN `movies_actors` AS ma ON ma.`actor_id` = a.`id`
       JOIN `movies` AS m  ON ma.`movie_id` = m.`id`
       SET a.`awards` = `awards` + 1
       WHERE m.`title` = movie_title;
END;
