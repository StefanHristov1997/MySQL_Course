01. Employees with Salary Above 35000
CREATE PROCEDURE usp_get_employees_salary_above_35000()
BEGIN
    SELECT `first_name`, `last_name` FROM `employees`
    WHERE `salary` > 35000
    ORDER BY `first_name`, `last_name`, `employee_id`;
END

02. Employees with Salary Above Number
CREATE PROCEDURE usp_get_employees_salary_above (`number` DECIMAL(19,4))
BEGIN
    SELECT `first_name`, `last_name` FROM `employees`
    WHERE `salary` >= `number`
    ORDER BY `first_name`, `last_name`, `employee_id`;
END

03. Town Names Starting With
CREATE PROCEDURE usp_get_towns_starting_with(given_string VARCHAR(50))
BEGIN
    SELECT `name` FROM `towns`
    WHERE `name`LIKE  CONCAT(given_string, '%')
    ORDER BY `name`;
END 

04. Employees from Town
CREATE PROCEDURE usp_get_employees_from_town (town_name VARCHAR(50))
BEGIN
	SELECT `first_name`, `last_name` FROM `employees` AS e
    JOIN `addresses` AS a ON e.`address_id` = a.`address_id`
    JOIN `towns` AS t ON a.`town_id` = t.`town_id`
    WHERE t.`name` = town_name
    ORDER BY e.`first_name`, e.`last_name`, e.`employee_id`;
END 

05. Salary Level Function
CREATE FUNCTION ufn_get_salary_level(salary DECIMAL)
RETURNS VARCHAR(10)
DETERMINISTIC
BEGIN
	DECLARE salary_level VARCHAR(10);
        SET salary_level := (CASE WHEN salary < 30000 THEN 'Low'
			      WHEN salary BETWEEN (30000) AND (50000) THEN 'Average'
                              WHEN salary > 50000 THEN 'High'
                              END);
	
    RETURN salary_level;
END

06. Employees by Salary Level
CREATE PROCEDURE usp_get_employees_by_salary_level(salary_level VARCHAR(10))
BEGIN
  SELECT `first_name`, `last_name` FROM `employees`
  WHERE ufn_get_salary_level(`salary`) LIKE salary_level
  ORDER BY `first_name` DESC, `last_name` DESC;
END

07. Define Function
CREATE FUNCTION ufn_is_word_comprised(set_of_letters varchar(50), word varchar(50))
RETURNS INT
DETERMINISTIC
BEGIN
      RETURN word REGEXP (CONCAT('^[', set_of_letters, ']+$'));
END

08. Find Full Name
CREATE PROCEDURE usp_get_holders_full_name()
BEGIN
     SELECT CONCAT_WS(" ", `first_name`, `last_name`) AS `full_name` FROM `account_holders`
     ORDER BY `full_name`, `id`;
END

9. People with Balance Higher Than
CREATE PROCEDURE usp_get_holders_with_balance_higher_than(money decimal(12,4))
BEGIN
    SELECT `first_name`, `last_name`
    FROM `account_holders` as h
    JOIN `accounts` as a ON h.`id` = a.`account_holder_id`
    GROUP BY `first_name`, `last_name`
    HAVING SUM(a.`balance`) > `money`;
END

10. Future Value Function
CREATE FUNCTION ufn_calculate_future_value (`sum` decimal(12,4), yearly_interest_rate DOUBLE, years INT)
RETURNS DECIMAL (12,4)
DETERMINISTIC
BEGIN
		DECLARE result DECIMAL(12,4);
        SET result := `sum` * (POW(1 + yearly_interest_rate, years));
        RETURN result;
END 

11. Calculating Interest
CREATE PROCEDURE usp_calculate_future_value_for_account(id INT, interest_rate DECIMAL(19,4))
BEGIN
    SELECT a.`id` AS 'account_id', ah.`first_name`, ah.`last_name`, 
    a.`balance` AS 'current_balance', ufn_calculate_future_value(a.balance, interest_rate, 5) AS 'balance_in_5_years'
    FROM `account_holders` AS ah
    JOIN `accounts` AS a ON a.`account_holder_id` = ah.`id`
    WHERE a.`id` = id;
END

12. Deposit Money
CREATE PROCEDURE usp_deposit_money(account_id INT, money_amount DECIMAL(19,4))
BEGIN
	START TRANSACTION;
    IF (money_amount <= 0) THEN
    ROLLBACK;
    ELSE
    UPDATE `accounts`
    SET `balance` = `balance` + money_amount
	WHERE `id` = account_id;
    END IF; 
END

13. Withdraw Money
CREATE PROCEDURE usp_withdraw_money(account_id INT, money_amount DECIMAL(19,4))
BEGIN
    DECLARE current_balance DECIMAL(19,4);
    SET current_balance := (SELECT `balance` FROM `accounts` WHERE `id` = account_id);
    
	START TRANSACTION;
    IF (current_balance < money_amount OR money_amount <= 0) THEN
    ROLLBACK;
    ELSE
    UPDATE `accounts

14. Money Transfer
CREATE PROCEDURE usp_transfer_money(fromID int, toID int,money_amount decimal(19,4))
BEGIN
    START TRANSACTION;
    IF(money_amount <= 0 OR (SELECT `balance` from `accounts` where `id` = fromID) < money_amount
    OR fromID = toID 
    OR (SELECT COUNT(id) FROM `accounts` WHERE `id` = fromID) <> 1
    OR (SELECT COUNT(id) FROM `accounts` WHERE `id` = toID) <> 1) 
    THEN ROLLBACK;
    ELSE
        UPDATE `accounts` SET `balance` = `balance` - money_amount
        WHERE `id` = fromID;
        UPDATE `accounts` SET `balance` = `balance` + money_amount
        WHERE `id` = toID;
        COMMIT;
    END IF; 
END

15. Log Accounts Trigger
CREATE TABLE `logs`(
    log_id INT PRIMARY KEY AUTO_INCREMENT,
	account_id INT NOT NULL,
    old_sum DECIMAL(19,4) NOT NULL, 
    new_sum DECIMAL(19,4) NOT NULL
);

CREATE TRIGGER tr_changed_balance
AFTER UPDATE
ON `accounts`
FOR EACH ROW
BEGIN 
        INSERT INTO `logs`(`account_id`, `old_sum`, `new_sum`)
        VALUES(OLD.`id`, OLD.`balance`, NEW.`balance`);
END

16. Emails Trigger
CREATE TABLE `notification_emails`(
    `id` INT PRIMARY KEY AUTO_INCREMENT, 
    `recipient` INT NOT NULL,
    `subject` TEXT,
    `body` TEXT
);

CREATE TRIGGER tr_email_on_change_balance
AFTER INSERT
ON `logs`
FOR EACH ROW
BEGIN
    INSERT INTO `notification_emails`(`recipient`, `subject`, `body`)
    VALUES (NEW.`account_id`, concat('Balance change for account:', NEW.`account_id`), concat('On ', DATE, ' at ', NOW, ' AM your balance was changed from ', NEW.`old_sum`, ' to ', NEW.`new_sum`, '.'));
END
    SET `balance` = `balance` - money_amount
	WHERE `id` = account_id;
    END IF;
END
